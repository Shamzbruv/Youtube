name: Auto-Gaming Shorts Pro
on:
  schedule:
    - cron: '25 14,20 * * *'  # 2:25PM & 8:25PM UTC
  workflow_dispatch:

jobs:
  clip:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Set Up System
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ffmpeg python3-pip libpython3-dev
          python -m pip install --upgrade pip wheel setuptools

      - name: Install Core Dependencies
        run: |
          pip install --no-cache-dir \
            yt-dlp>=2023.11.16 \
            google-api-python-client>=2.104.0 \
            google-auth-oauthlib>=1.2.0 \
            requests>=2.31.0 \
            openai-whisper>=20231117 \
            transformers>=4.35.2

          pip install --no-cache-dir torch>=2.1.0 --index-url https://download.pytorch.org/whl/cpu

      - name: Verify Installations
        run: |
          python -c "
          try:
            import yt_dlp, googleapiclient, google.auth, requests, whisper, torch, transformers
            print('✅ All core dependencies installed successfully')
          except ImportError as e:
            print(f'❌ Missing dependency: {e}')
            exit(1)
          "

      - name: Run Pipeline
        env:
          YT_API_KEY: ${{ secrets.YT_API_KEY }}
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}  # From your client_secret.json
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}  # From your client_secret.json
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          WHISPER_MODEL: "tiny"
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/credentials.json
        run: |
          # Create properly formatted credentials file
          echo '{
            "client_id": "$YT_CLIENT_ID",
            "client_secret": "$YT_CLIENT_SECRET",
            "refresh_token": "$YT_REFRESH_TOKEN",
            "type": "authorized_user",
            "token_uri": "https://oauth2.googleapis.com/token"
          }' > $GOOGLE_APPLICATION_CREDENTIALS

          python -c "
          try:
            import whisper
            whisper.load_model('$WHISPER_MODEL')
          except Exception as e:
            print(f'⚠️ Whisper init failed: {e}')
            exit(1)
          "
          python pipeline.py

      - name: Clean Up
        if: always()
        run: |
          rm -f *.mp4 *.srt *.json *.webm *.part
          rm -f /tmp/credentials.json
